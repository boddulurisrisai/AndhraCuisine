{"ast":null,"code":"var _jsxFileName = \"/Users/karthikreddy/Downloads/EWA Project/AndhraCuisine/front-end/src/pages/ChatAssistant.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ChatInput from './ChatInput'; // Input component for the chat\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatAssistant() {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: 'Welcome to our food service! How can I assist you today?',\n    sender: 'assistant'\n  }]);\n  const handleSendMessage = async newMessage => {\n    setMessages(prevMessages => [...prevMessages, {\n      text: newMessage,\n      sender: 'user'\n    }]);\n    try {\n      // Sending message to backend server, which interacts with OpenAI and MongoDB\n      const response = await fetch('http://localhost:3030/api/chat/recommendation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: newMessage\n        })\n      });\n      const data = await response.json();\n\n      // Add assistant's recommendation to the chat\n      setMessages(prevMessages => [...prevMessages, {\n        text: data.recommendation,\n        sender: 'assistant'\n      }]);\n\n      // If products are available, display them in the chat or UI\n      if (data.products) {\n        console.log('Fetched Products:', data.products);\n        // You can map over the products and render them in the UI as needed\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: 'Sorry, there was an issue. Please try again.',\n        sender: 'assistant'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-assistant-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatAssistant, \"+GPDvaZyvg4eJpzEJ460hCWCh58=\");\n_c = ChatAssistant;\nexport default ChatAssistant;\nvar _c;\n$RefreshReg$(_c, \"ChatAssistant\");","map":{"version":3,"names":["React","useState","ChatInput","jsxDEV","_jsxDEV","ChatAssistant","_s","messages","setMessages","text","sender","handleSendMessage","newMessage","prevMessages","response","fetch","method","headers","body","JSON","stringify","message","data","json","recommendation","products","console","log","error","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/karthikreddy/Downloads/EWA Project/AndhraCuisine/front-end/src/pages/ChatAssistant.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ChatInput from './ChatInput'; // Input component for the chat\n\nfunction ChatAssistant() {\n    const [messages, setMessages] = useState([\n        { text: 'Welcome to our food service! How can I assist you today?', sender: 'assistant' }\n    ]);\n\n    const handleSendMessage = async (newMessage) => {\n        setMessages((prevMessages) => [...prevMessages, { text: newMessage, sender: 'user' }]);\n\n        try {\n            // Sending message to backend server, which interacts with OpenAI and MongoDB\n            const response = await fetch('http://localhost:3030/api/chat/recommendation', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ message: newMessage }),\n            });\n\n            const data = await response.json();\n\n            // Add assistant's recommendation to the chat\n            setMessages((prevMessages) => [\n                ...prevMessages,\n                { text: data.recommendation, sender: 'assistant' },\n            ]);\n\n            // If products are available, display them in the chat or UI\n            if (data.products) {\n                console.log('Fetched Products:', data.products);\n                // You can map over the products and render them in the UI as needed\n            }\n\n        } catch (error) {\n            console.error('Error sending message:', error);\n            setMessages((prevMessages) => [\n                ...prevMessages,\n                { text: 'Sorry, there was an issue. Please try again.', sender: 'assistant' }\n            ]);\n        }\n    };\n\n\n\n\n    return (\n        <div className=\"chat-assistant-container\">\n            <div className=\"chat-box\">\n                {messages.map((message, index) => (\n                    <div key={index} className={`message ${message.sender}`}>\n                        {message.text}\n                    </div>\n                ))}\n            </div>\n            <ChatInput onSendMessage={handleSendMessage} />\n        </div>\n    );\n}\n\nexport default ChatAssistant;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CACrC;IAAEQ,IAAI,EAAE,0DAA0D;IAAEC,MAAM,EAAE;EAAY,CAAC,CAC5F,CAAC;EAEF,MAAMC,iBAAiB,GAAG,MAAOC,UAAU,IAAK;IAC5CJ,WAAW,CAAEK,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;MAAEJ,IAAI,EAAEG,UAAU;MAAEF,MAAM,EAAE;IAAO,CAAC,CAAC,CAAC;IAEtF,IAAI;MACA;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAET;QAAW,CAAC;MAChD,CAAC,CAAC;MAEF,MAAMU,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;;MAElC;MACAf,WAAW,CAAEK,YAAY,IAAK,CAC1B,GAAGA,YAAY,EACf;QAAEJ,IAAI,EAAEa,IAAI,CAACE,cAAc;QAAEd,MAAM,EAAE;MAAY,CAAC,CACrD,CAAC;;MAEF;MACA,IAAIY,IAAI,CAACG,QAAQ,EAAE;QACfC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,IAAI,CAACG,QAAQ,CAAC;QAC/C;MACJ;IAEJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CpB,WAAW,CAAEK,YAAY,IAAK,CAC1B,GAAGA,YAAY,EACf;QAAEJ,IAAI,EAAE,8CAA8C;QAAEC,MAAM,EAAE;MAAY,CAAC,CAChF,CAAC;IACN;EACJ,CAAC;EAKD,oBACIN,OAAA;IAAKyB,SAAS,EAAC,0BAA0B;IAAAC,QAAA,gBACrC1B,OAAA;MAAKyB,SAAS,EAAC,UAAU;MAAAC,QAAA,EACpBvB,QAAQ,CAACwB,GAAG,CAAC,CAACV,OAAO,EAAEW,KAAK,kBACzB5B,OAAA;QAAiByB,SAAS,EAAE,WAAWR,OAAO,CAACX,MAAM,EAAG;QAAAoB,QAAA,EACnDT,OAAO,CAACZ;MAAI,GADPuB,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNhC,OAAA,CAACF,SAAS;MAACmC,aAAa,EAAE1B;IAAkB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEd;AAAC9B,EAAA,CAtDQD,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AAwDtB,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}